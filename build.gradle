plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.6'
	id 'io.spring.dependency-management' version '1.1.5'
    id 'com.diffplug.spotless' version '6.21.0'
    id 'jacoco'
}

group = 'com.depromeet'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	compileOnly 'org.projectlombok:lombok'

    // Database
    runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Querydsl
    implementation "io.github.openfeign.querydsl:querydsl-jpa:6.0"
    implementation "io.github.openfeign.querydsl:querydsl-core:6.0"
    annotationProcessor "io.github.openfeign.querydsl:querydsl-apt:6.0:jpa"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

def QDomains = []

for (qPattern in '*/QA'..'*/QZ') {
    QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
        '**/*Application*',
        '**/*Config/*',
        '**/resources/**',
        '**/test/**',
]

def jacocoDir = layout.buildDirectory.dir("reports/")

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)
        html.destination jacocoDir.get().file("jacoco/html").asFile
        xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
        csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains)
                })
        )
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            excludes = jacocoExcludePatterns + QDomains
        }
    }
}

spotless {
    java {
        target("**/*.java")
        importOrder()
        // 사용하지 않은 import문 제거
        removeUnusedImports()
        // 2개 이상 있거나 이제 앞뒤로 불필요한 공백이 있을 때 제거해주는 옵션
        trimTrailingWhitespace()
        // 줄은 공백으로 남아있을 수 있도록 항상 옵션을 걸어준다.
        endWithNewline()
        // google java format
        googleJavaFormat().aosp()
    }
}

// git pre-commit hook task 설정
tasks.register("addGitPreCommitHook", Copy) {
    from 'scripts/pre-commit'
    into '.git/hooks'
}

compileJava.dependsOn addGitPreCommitHook
